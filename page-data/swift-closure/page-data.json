{"componentChunkName":"component---src-templates-blog-post-js","path":"/swift-closure/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"我的博客"}},"markdownRemark":{"id":"fd8c2fc8-205b-5cdf-8178-d12451f9c8b8","excerpt":"前言 闭包在swift\b开发中非常常见。但它却和js中所谓的闭包并不相同。 \b它并不像javascript中的闭包 \bjs中的闭包通常是用于将函数中的私有变量能够供函数外调用的函数，\b通常称作为闭包。\b在日常开发中，\b可以用于创建\b对象实例等。\b比如以下 但swift中的闭包是从\boc中的block…","html":"<h2>前言</h2>\n<p>闭包在swift\b开发中非常常见。但它却和js中所谓的闭包并不相同。</p>\n<h2>\b它并不像javascript中的闭包</h2>\n<p>\bjs中的闭包通常是用于将函数中的私有变量能够供函数外调用的函数，\b通常称作为闭包。\b在日常开发中，\b可以用于创建\b对象实例等。\b比如以下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>但swift中的闭包是从\boc中的block衍生过来的产物，只是换了个名字叫闭包（closure）。\b首先来看一个典型的闭包。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">outText</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> text\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>\b作为一个前端在看到这个代码后，肯定会说，这特么不就是一个回调函数嘛。确实，这就是一个回调函数，\b相当于如下的js代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">outText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    const a <span class=\"token operator\">=</span> text\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>\b两个函数功能完全一致，而函数中的回调函数，在swift中就被称为闭包。在swift中，闭包的主要工作之一就是用于作为回调函数来使用。</p>\n<p>除了作为回调函数外，\b另一个常用的功能就是用于实例化对象,代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> objA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> obj\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>对，\b你没有看错，这特么就是js中的利用\b匿名函数\b创建对象，\b\b而那个匿名函数在swift中，就被称为是闭包的调用。相同的js如下表示：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">const objA <span class=\"token operator\">=</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> obj\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>swift经常会通过这种方式来定义个\b控件。</p>\n<h2>\b闭包有多种简写的代码格式</h2>\n<p>对于前端开发者来说，swift的闭包在功能使用上并没有太多不同认知，你只需要知道它其实就是一个函数，用于回调和匿名函数即可。然而，swift的闭包变态的是它具有多种不同的格式写法，或者称作为多种简写。以下是一个完整写法和一个最简写法。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 完整写法</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 最简写</span>\nfuncA<span class=\"token punctuation\">{</span>$<span class=\"token number\">0</span> <span class=\"token operator\">+</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>是不是有种三观被毁的感觉。\b这特么还是同一个东西吗？作为一个前端，我一开始看见这种简写形态是懵逼的。难道多写几个代码会死吗？</p>\n<p>不过，当你代码看多了的时候，你会发现很多别人的代码或者是一些开源库，在闭包的使用上几乎都是能用简写，绝对不用完整版。所以你只能习惯就好。其实我个人觉得完整版在阅读的时候更加清晰，参数使用更加明确。</p>\n<p>当然，完整版和最简写之间是有一连串的省略。以下就是\b各阶段省略的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 完整写法</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 省略闭包中参数的类型</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 省略闭包中参数的挂号</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span>b <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 省略返回类型</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span>b <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 省略return </span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span>b <span class=\"token keyword\">in</span> \n    a<span class=\"token operator\">+</span>b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 省略闭包中的参数</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n    $<span class=\"token number\">0</span><span class=\"token operator\">+</span>$<span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 省略函数中的参数名</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>$<span class=\"token number\">0</span> <span class=\"token operator\">+</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 再把挂号去掉的最简写</span>\nfuncA<span class=\"token punctuation\">{</span>$<span class=\"token number\">0</span> <span class=\"token operator\">+</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>\b\b\b以上的简写，你可以根据需求使用任何一个阶段的简写。\b通常，也是在需求允许的情况做到最简单写法。</p>\n<p>在以上这些简写中的最后一步简写，涉及到一个\b闭包的新特性，\b叫做尾随闭包。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 完整写法</span>\n<span class=\"token function\">funcB</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 省略函数\b末尾的回调函数的参数，也就是闭包的名称</span>\n<span class=\"token function\">funcB</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上列子，并没有简写至最简写，目的是告诉你什么是尾随闭包。\b用前端\b小伙伴便于理解的话来说，就是如果这个回调函数被放在了函数参数的最后\b一个，那么我们就可以省略掉参数名称，并且把回调函数的大挂号放到函数外面来表示。</p>\n<p>就是由于这样的改变，可能会导致一个前端转过来的同学在阅读代码时看的\b\b会有点懵。但只要你知道它的完整版就很容易理解了。</p>\n<p>另外，\b闭包还有一个重要知识点，逃逸闭包。废话少说，看代码</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 定义一个带有闭包的函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> @escape <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// todo</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \bhttp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>then<span class=\"token punctuation\">{</span> data <span class=\"token keyword\">in</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 调用函数</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>和普通的闭包相比，仅仅在定义闭包的时候多了一个escape。\b\b\b它表示的意义是，当前这个闭包会在本身函数执行完毕后才执行。\b<code class=\"language-text\">http.get()</code>是表示这是一个请求函数或者是一个延时\b操作。只有当这个操作执行完成后才会执行\b闭包。而这样的闭包我们就必须加上escape来修饰。否则编译报错。</p>\n<p>\b用前端的理解就是，这个回调函数是由一个异步请求来触发的，我们就必须加上escape。这个特性在js里当然也是有的。只不过,js根本没有把回调分为异步回调和普通回调。\b无论哪种回调，写法都一样。</p>\n<h2>总结</h2>\n<p>\bios开发，闭包随处可见。首先，不要被它的各种简写搞懵。其次，把他们当成回调函数，或者匿名函数理解就可以。如果是异步回调，就加上escape修饰。</p>","frontmatter":{"title":"一个前端学习IOS开发采坑记-swift的闭包","date":"2019-01-16","description":null}}},"pageContext":{"slug":"/swift-closure/","previous":{"fields":{"slug":"/ios_1/"},"frontmatter":{"title":"一个前端学习IOS开发采坑记-1"}},"next":{"fields":{"slug":"/typescript-vue/"},"frontmatter":{"title":"浅谈typescript用于vue开发的优点和坑"}}}}}